name: FastAPI CI/CD

on:
  push:
    branches: [ main, fastapi-migration ]
    paths:
      - 'api/**'
      - 'requirements_api.txt'
      - 'Dockerfile.api'
      - 'docker-compose.dev.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'api/**'
      - 'requirements_api.txt'
      - 'Dockerfile.api'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_api.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_api.txt
    
    - name: Create test directories
      run: |
        mkdir -p ./data/uploads
        mkdir -p ./api/tests
    
    - name: Run tests with pytest
      run: |
        pytest api/tests/ -v --cov=api --cov-report=xml --cov-report=html
      env:
        OPENAI_API_KEY: test-key  # Mock key for testing
        SECRET_KEY: test-secret-key
        API_KEY: test-api-key
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: api-tests
        name: codecov-umbrella
    
    - name: Archive coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -f Dockerfile.api -t gym-register-api:${{ github.sha }} .
        docker build -f Dockerfile.api -t gym-register-api:latest .
    
    - name: Test Docker image
      run: |
        # Run container in background
        docker run -d --name test-api \
          -p 8000:8000 \
          -e OPENAI_API_KEY=test-key \
          -e SECRET_KEY=test-secret \
          -e API_KEY=test-api-key \
          gym-register-api:${{ github.sha }}
        
        # Wait for startup
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/api/health || exit 1
        
        # Test API info endpoint
        curl -f http://localhost:8000/api/info || exit 1
        
        # Stop container
        docker stop test-api
        docker rm test-api
    
    # Optional: Push to registry (uncomment for production)
    # - name: Log in to Docker Hub
    #   if: github.ref == 'refs/heads/main'
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}
    # 
    # - name: Push to Docker Hub
    #   if: github.ref == 'refs/heads/main'
    #   run: |
    #     docker tag gym-register-api:latest your-dockerhub-username/gym-register-api:latest
    #     docker tag gym-register-api:${{ github.sha }} your-dockerhub-username/gym-register-api:${{ github.sha }}
    #     docker push your-dockerhub-username/gym-register-api:latest
    #     docker push your-dockerhub-username/gym-register-api:${{ github.sha }}

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run black (code formatting check)
      run: |
        black --check api/
    
    - name: Run isort (import sorting check)
      run: |
        isort --check-only api/
    
    - name: Run flake8 (linting)
      run: |
        flake8 api/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 api/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run mypy (type checking)
      run: |
        mypy api/ --ignore-missing-imports || true  # Allow to pass for now

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit (security linting)
      run: |
        bandit -r api/ -f json -o bandit-report.json || true
        bandit -r api/ || true
    
    - name: Check dependencies for known vulnerabilities
      run: |
        safety check -r requirements_api.txt || true
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json